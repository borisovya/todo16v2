{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Login/authReducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","StatusCode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","res","resultCode","catch","console","warn","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","Ok","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","finally","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65331beb.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c867f151-d778-4732-b771-491c0bdd4a4a'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>('auth/login', data);\r\n    },\r\n    logOut() {\r\n        return instance.delete<ResponseType>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<meType>>('auth/me')\r\n    }\r\n}\r\n\r\n// types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: boolean\r\n}\r\n\r\nexport type meType = {\r\n        id: number,\r\n        email: string,\r\n        login: string\r\n}\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport enum StatusCode {\r\n    Ok = 0,\r\n    ERROR = 1,\r\n    CAPTCHA = 10\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC,  setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error:data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error:'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC(error.message ? {error: error.message} : {error:'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n","import { Dispatch} from \"redux\";\r\nimport {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType, StatusCode} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport const authReducer = slice.reducer\r\nexport const setIsLoggedInAC = slice.actions.setIsLoggedInAC\r\n\r\n\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.login(data)\r\n        .then((res)=>{\r\n            if (res.data.resultCode === StatusCode.Ok) {\r\n                dispatch(setIsLoggedInAC({value: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error: AxiosError)=>{\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    authAPI.logOut()\r\n        .then((res)=>{\r\n            if (res.data.resultCode === StatusCode.Ok) {\r\n                dispatch(setIsLoggedInAC({value: false}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error: AxiosError)=>{\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI, StatusCode} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/authReducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setIsInitializedAC(state, action: PayloadAction<{isInitialized: boolean}>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\nexport const {setAppStatusAC, setIsInitializedAC, setAppErrorAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === StatusCode.Ok) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch);\r\n        }\r\n    })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n        .finally(()=>{dispatch(setIsInitializedAC({isInitialized:true}))})\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if(index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        addTodolistAC (state, action: PayloadAction<{todolist: TodolistType}>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>){\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{id: string, filter: FilterValuesType}>){\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{id: string, status: RequestStatusType}>){\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{todolists: Array<TodolistType>}>){\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeTodolistFilterAC, changeTodolistEntityStatusAC, setTodolistsAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\n// export type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\n// export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\n// export type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n// type ActionsType =\r\n//     | RemoveTodolistActionType\r\n//     | AddTodolistActionType\r\n//     | ReturnType<typeof changeTodolistTitleAC>\r\n//     | ReturnType<typeof changeTodolistFilterAC>\r\n//     | SetTodolistsActionType\r\n//     | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch\r\n","import {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport { Dispatch } from 'redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { setAppStatusAC } from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{taskId: string, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks.splice(index,1)\r\n            }\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{task: TaskType}>){\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{taskId: string, model: UpdateDomainTaskModelType, todolistId: string}>){\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if(index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.model}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{tasks: Array<TaskType>, todolistId: string}>){\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder)=>{\r\n        builder.addCase(addTodolistAC, (state, action) =>{\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) =>{\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) =>{\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC({tasks, todolistId}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC({taskId, todolistId})\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC({task})\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({status:'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\ntype ThunkDispatch = Dispatch\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state)=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./authReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {}\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 5) {\r\n                errors.password = 'Must be min 5 characters';\r\n            }\r\n            return errors\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n\r\n                        <TextField label=\"Email\" margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>} {...formik.getFieldProps('rememberMe')}\r\n                                          checked={formik.values.rememberMe}\r\n                        />\r\n\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {CircularProgress} from \"@mui/material\";\r\nimport {logOutTC} from \"../features/Login/authReducer\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Menu\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={()=>{dispatch(logOutTC())}}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Routes>\r\n\r\n                    <Route path='/' element={<TodolistsList/>}/>\r\n                    <Route path='/login' element={<Login/>}/>\r\n                    <Route path='/404' element={<h1 style={{textAlign: 'center'}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path='*' element={<Navigate to='/404'/>}/>\r\n\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Login/authReducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n        <Provider store={store}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}